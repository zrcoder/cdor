#!/usr/bin/env gop run

import (
	"fmt"
	"os"

	"github.com/zrcoder/cdor"
)

const mdCodeTemp = "```\n%s\n```"

func genMdNode(code string, id ...string) {
	key := "md"
	if len(id) > 0 {
		key = id[0]
	}
	node(key).code("md", fmt.sprintf(mdCodeTemp, code))
}

func save(name string) {
	saveFile! "examples/${name}.svg"
}

cfg.pad(27).elkLayout()

direction "right"
genMdNode `con("Go+", "Go").label("cdor")`
con("Go+", "Go").label("cdor")
save "hello"

clear
genMdNode `node "imAShape"
node "im_a_shape"
node "im a shape"
node "i'm a shape"
node "a-shape"
`
node "imAShape"
node "im_a_shape"
node "im a shape"
node "i'm a shape"
node "a-shape"
save "example-id"

clear
genMdNode `node("pg").label("PostgreSQL")
node("Cloud").label("my cloud").shape("cloud")`
node("pg").label("PostgreSQL")
node("Cloud").label("my cloud").shape("cloud")
save "shape"

clear
genMdNode `con("x", "y").srcHeadShape("none").stroke("orange")
con("x", "y").dstHeadShape("none").stroke("green")
con("x", "y").srcHeadShape("none").dstHeadShape("none")
con("a", "b").srcHeadShape("circle")
con("b", "c").srcHeadShape("circle")
con("c", "a")`
con("x", "y").srcHeadShape("none").stroke("orange")
con("x", "y").dstHeadShape("none").stroke("green")
con("x", "y").srcHeadShape("none").dstHeadShape("none")
con("a", "b").srcHeadShape("circle")
con("b", "c").srcHeadShape("circle")
con("c", "a")
save "connections"

clear
direction "right"
opt := arrowOpt().srcHeadShape("none")
genMdNode `opt := arrowOpt().srcHeadShape("none")

node("clouds").children(
	node("aws").label("AWS").cons(
		con("load_balancer", "api"),
		con("api", "db"),
	),
	node("gcloud").label("Google Cloud").cons(
		con("auth", "db").arrowOpt(opt),
	)).
	cons(
		con("gcloud", "aws").arrowOpt(opt),
	)
con("users", "clouds.aws.load_balancer").arrowOpt(opt)
con("users", "clouds.gcloud.auth").arrowOpt(opt)
con("ci.deploys", "clouds").arrowOpt(opt)
`
node("clouds").children(
	node("aws").label("AWS").cons(
		con("load_balancer", "api"),
		con("api", "db"),
	),
	node("gcloud").label("Google Cloud").cons(
		con("auth", "db").arrowOpt(opt),
	)).
	cons(
		con("gcloud", "aws").arrowOpt(opt),
	)
con("users", "clouds.aws.load_balancer").arrowOpt(opt)
con("users", "clouds.gcloud.auth").arrowOpt(opt)
con("ci.deploys", "clouds").arrowOpt(opt)
save "containers"

clear
mdContent := `# I can do headers
  - lists
  - lists

  And other normal markdown stuff
`
genMdNode "mdContent := `${mdContent}`\nnode(\"markdown\").code(\"md\", mdContent)"
node("markdown").code("md", mdContent)
save "md"

clear
tex := `\lim_{h \rightarrow 0 } \frac{f(x+h)-f(x)}{h}`
genMdNode "tex := `${tex}`\nnode(\"tex\").code(\"latex\", tex)"
node("tex").code("latex", tex)
save "latex"

clear
genMdNode `node("table").shape("sql_table").
	field("id", "int", "primary_key").
	field("last_updated", "timestamp with time zone")`
node("table").shape("sql_table").
	field("id", "int", "primary_key").
	field("last_updated", "timestamp with time zone")
save "sql_table"

clear
genMdNode `node("MyClass").
	shape("class").
	field("Age", "int").
	field("+ Field", "[]string").
	field("- method(a uint64)", "(x, y int)").
	field("# peekn(n int)", "(s string, eof bool)")`
node("MyClass").
	shape("class").
	field("Age", "int").
	field("+ Field", "[]string").
	field("- method(a uint64)", "(x, y int)").
	field("# peekn(n int)", "(s string, eof bool)")
save "calss"

clear

sequence()
scon("alice", "bob").Label("What does it mean\nto be well-adjusted?")
scon("bob", "alice").Label("The ability to play bridge or\ngolf as if they were games.")
save "sequence"

/*
   c = cdor.ctx
   genMdNode(c, `node("github").shape("image").icon("https://icons.terrastruct.com/dev/github.svg")`)
   c.node("github").shape("image").icon("https://icons.terrastruct.com/dev/github.svg")
   c.node("gg").icon("https://icons.terrastruct.com/dev/github.svg")
   gen(c, "icon")
*/
