import (
	"bytes"
	"os"
	"path/filepath"
)

const cdorSuffix = "_cdor.gox"

applyConfig cfg.sketch().elkLayout().theme(butteredToast).darkTheme(darkMauve)

buf := bytes.newBuffer(nil)

rangeCdors (name, cdor, err) => {
	if err != nil {
		echo err
		return err
	}

	var code []byte
	code, err = os.readFile(filepath.join("doc", name+cdorSuffix))
	if err != nil {
		echo err
		return err
	}
	cdor.mdCode string(code)
	var data []byte
	data, err = cdor.Gen()
	if err != nil {
		echo err
		return err
	}
	name = name[3:]
	err = os.writeFile("doc/examples/${name}.svg", data, 0600)
	if err != nil {
		echo err
		return err
	}
	buf.writeString "![${name}](doc/examples/${name}.svg)\n"
	return nil
}

readmeTemp, err := os.readFile("doc/readmeTemp.md")
if err != nil {
	panic err
}

readmeContent := string(readmeTemp)

readmeContent = readmeContent.replace("{{ .Examples }}", buf.string, 1)
if err := os.writeFile("README.md", []byte(readmeContent), 0600); err != nil {
	panic err
}
