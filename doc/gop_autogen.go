// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"bytes"
	"fmt"
	"github.com/qiniu/x/stringutil"
	"github.com/zrcoder/cdor"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

const _ = true
const dotQuote = "`"

type Person struct {
	Name string
	Age  int
}

const cdorSuffix = "_cdor.gox"

type c01hello struct {
	cdor.Cdor
	*App
}
type c06md struct {
	cdor.Cdor
	*App
}
type c07latex struct {
	cdor.Cdor
	*App
}
type c08sql_table struct {
	cdor.Cdor
	*App
}
type c09class struct {
	cdor.Cdor
	*App
}
type c10jsonn struct {
	cdor.Cdor
	*App
}
type c13obj struct {
	cdor.Cdor
	*App
}
type c14grid struct {
	cdor.Cdor
	*App
}
type c15sequence struct {
	cdor.Cdor
	*App
}
type c16shapes struct {
	cdor.Cdor
	*App
}
type c18icon struct {
	cdor.Cdor
	*App
}
type App struct {
	cdor.Mgr
}
//line doc/main_cdor.gox:9
func (this *App) MainEntry() {
//line doc/main_cdor.gox:9:1
	this.ApplyConfig(this.Cfg().ElkLayout().Sketch())
//line doc/main_cdor.gox:11:1
	buf := bytes.NewBuffer(nil)
//line doc/main_cdor.gox:13:1
	this.RangeCdors(func(name string, cdor *cdor.Cdor, err error) error {
//line doc/main_cdor.gox:14:1
		if err != nil {
//line doc/main_cdor.gox:15:1
			fmt.Println(err)
//line doc/main_cdor.gox:16:1
			return err
		}
//line doc/main_cdor.gox:19:1
		var code []byte
//line doc/main_cdor.gox:20:1
		code, err = os.ReadFile(filepath.Join("doc", name+cdorSuffix))
//line doc/main_cdor.gox:21:1
		if err != nil {
//line doc/main_cdor.gox:22:1
			fmt.Println(err)
//line doc/main_cdor.gox:23:1
			return err
		}
//line doc/main_cdor.gox:25:1
		cdor.MdCode(string(code))
//line doc/main_cdor.gox:26:1
		var data []byte
//line doc/main_cdor.gox:27:1
		data, err = cdor.Gen()
//line doc/main_cdor.gox:28:1
		if err != nil {
//line doc/main_cdor.gox:29:1
			fmt.Println(err)
//line doc/main_cdor.gox:30:1
			return err
		}
//line doc/main_cdor.gox:32:1
		name = name[3:]
//line doc/main_cdor.gox:33:1
		err = os.WriteFile(stringutil.Concat("doc/examples/", name, ".svg"), data, 0600)
//line doc/main_cdor.gox:34:1
		if err != nil {
//line doc/main_cdor.gox:35:1
			fmt.Println(err)
//line doc/main_cdor.gox:36:1
			return err
		}
//line doc/main_cdor.gox:38:1
		buf.WriteString(stringutil.Concat("![", name, "](doc/examples/", name, ".svg)\n"))
//line doc/main_cdor.gox:39:1
		return nil
	})
//line doc/main_cdor.gox:42:1
	readmeTemp, err := os.ReadFile("doc/readmeTemp.md")
//line doc/main_cdor.gox:43:1
	if err != nil {
//line doc/main_cdor.gox:44:1
		panic(err)
	}
//line doc/main_cdor.gox:47:1
	readmeContent := string(readmeTemp)
//line doc/main_cdor.gox:49:1
	readmeContent = strings.Replace(readmeContent, "{{ .Examples }}", buf.String(), 1)
//line doc/main_cdor.gox:50:1
	if
//line doc/main_cdor.gox:50:1
	err := os.WriteFile("README.md", []byte(readmeContent), 0600); err != nil {
//line doc/main_cdor.gox:51:1
		panic(err)
	}
}
func main() {
	cdor.Gopt_App_Main(new(App), new(c01hello), new(c06md), new(c07latex), new(c08sql_table), new(c09class), new(c10jsonn), new(c13obj), new(c14grid), new(c15sequence), new(c16shapes), new(c18icon))
}
//line doc/c01hello_cdor.gox:1
func (this *c01hello) Main() {
//line doc/c01hello_cdor.gox:1:1
	this.Direction("right")
//line doc/c01hello_cdor.gox:2:1
	this.Con("Go+", "Go").Label("cdor")
}
//line doc/c06md_cdor.gox:1
func (this *c06md) Main() {
//line doc/c06md_cdor.gox:1:1
	mdContent := `# I can do headers
  - lists
  - lists

  And other normal markdown stuff
`
//line doc/c06md_cdor.gox:7:1
	this.Node("markdown").Code("md", mdContent)
}
//line doc/c07latex_cdor.gox:1
func (this *c07latex) Main() {
//line doc/c07latex_cdor.gox:1:1
	tex := `\lim_{h \rightarrow 0 } \frac{f(x+h)-f(x)}{h}`
//line doc/c07latex_cdor.gox:2:1
	this.Node("tex").Code("latex", tex)
}
//line doc/c08sql_table_cdor.gox:1
func (this *c08sql_table) Main() {
//line doc/c08sql_table_cdor.gox:1:1
	this.Node("table").Shape("sql_table").Field("id", "int", "primary_key").Field("last_updated", "timestamp with time zone")
}
//line doc/c09class_cdor.gox:1
func (this *c09class) Main() {
//line doc/c09class_cdor.gox:1:1
	this.Node("MyClass").Shape("class").Field("Age", "int").Field("+ Field", "[]string").Field("- method(a uint64)", "(x, y int)").Field("# peekn(n int)", "(s string, eof bool)")
}
//line doc/c10jsonn_cdor.gox:1
func (this *c10jsonn) Main() {
//line doc/c10jsonn_cdor.gox:1:1
	data := `{
   "fruit":"Apple", 
   "colors": ["Red", "Green"]
}`
//line doc/c10jsonn_cdor.gox:6:1
	this.Node("obj").Json(data)
//line doc/c10jsonn_cdor.gox:7:1
	this.Scon("root", "obj.0")
//line doc/c10jsonn_cdor.gox:8:1
	this.Direction("right")
}
//line doc/c13obj_cdor.gox:1
func (this *c13obj) Main() {
//line doc/c13obj_cdor.gox:1:1
	person := Person{Name: "Tom", Age: 27}
//line doc/c13obj_cdor.gox:3:1
	this.Obj(person)
}
//line doc/c14grid_cdor.gox:3
func (this *c14grid) Main() {
//line doc/c14grid_cdor.gox:3:1
	this.GridGap(0)
//line doc/c14grid_cdor.gox:5:1
	this.Node("table").Label("").GridRows(1).GridCols(4).GridGap(0).Children(this.Node("Element"), this.Node("Atomic Number"), this.Node("Atomic Mass"), this.Node("Melting Point"), this.Node("Hydrogen"), this.Node("1"), this.Node(strconv.Quote("1.008")), this.Node(strconv.Quote("-259.16")), this.Node("Carbon"), this.Node("6"), this.Node(strconv.Quote("12.011")), this.Node("3500"), this.Node("Oxygen"), this.Node("8"), this.Node(strconv.Quote("15.999")), this.Node(strconv.Quote("-218.79")))
}
//line doc/c15sequence_cdor.gox:1
func (this *c15sequence) Main() {
//line doc/c15sequence_cdor.gox:1:1
	this.Node("sequence").Label("").Sequence().Cons(this.Scon("alice", "bob").Label("What does it mean\nto be well-adjusted?"), this.Scon("bob", "alice").Label("The ability to play bridge or\ngolf as if they were games."))
}
//line doc/c16shapes_cdor.gox:1
func (this *c16shapes) Main() {
//line doc/c16shapes_cdor.gox:1:1
	this.GridCols(1).GridGap(0)
//line doc/c16shapes_cdor.gox:3:1
	op := this.Opt().Label("").Fill("transparent").Stroke("transparent")
//line doc/c16shapes_cdor.gox:5:1
	this.Node("1").Opt(op).Children(this.Node("rectangle").Shape("rectangle"), this.Node("square").Shape("square"), this.Node("page").Shape("page"), this.Node("parallelogram").Shape("parallelogram"))
//line doc/c16shapes_cdor.gox:11:1
	this.Node("2").Opt(op).Children(this.Node("document").Shape("document"), this.Node("cylinder").Shape("cylinder"), this.Node("queue").Shape("queue"), this.Node("package").Shape("package"), this.Node("step").Shape("step"))
//line doc/c16shapes_cdor.gox:18:1
	this.Node("3").Opt(op).Children(this.Node("callout").Shape("callout"), this.Node("stored_data").Shape("stored_data"), this.Node("person").Shape("person"), this.Node("diamond").Shape("diamond"))
//line doc/c16shapes_cdor.gox:24:1
	this.Node("4").Opt(op).Children(this.Node("oval").Shape("oval"), this.Node("circle").Shape("circle"), this.Node("hexagon").Shape("hexagon"), this.Node("cloud").Shape("cloud"))
}
//line doc/c18icon_cdor.gox:3
func (this *c18icon) Main() {
//line doc/c18icon_cdor.gox:3:1
	iconPath := filepath.Join("doc", "examples", "icons", "github.svg")
//line doc/c18icon_cdor.gox:4:1
	this.Node("github").Icon(iconPath)
//line doc/c18icon_cdor.gox:5:1
	this.Node("gg").Icon(iconPath).Shape("image")
}
