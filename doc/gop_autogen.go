// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"bytes"
	"fmt"
	"github.com/zrcoder/cdor"
	"os"
	"strings"
)

const _ = true
const dotQuote = "`"

type Person struct {
	Name string
	Age  int
}
type c01hello struct {
	cdor.Cdor
	*App
}
type c02id struct {
	cdor.Cdor
	*App
}
type c03shape struct {
	cdor.Cdor
	*App
}
type c04connections struct {
	cdor.Cdor
	*App
}
type c05containers struct {
	cdor.Cdor
	*App
}
type c06md struct {
	cdor.Cdor
	*App
}
type c07latex struct {
	cdor.Cdor
	*App
}
type c08sql_table struct {
	cdor.Cdor
	*App
}
type c09class struct {
	cdor.Cdor
	*App
}
type c10json struct {
	cdor.Cdor
	*App
}
type c10jsonn struct {
	cdor.Cdor
	*App
}
type c11toml struct {
	cdor.Cdor
	*App
}
type c11tomln struct {
	cdor.Cdor
	*App
}
type c12yaml struct {
	cdor.Cdor
	*App
}
type c12yamln struct {
	cdor.Cdor
	*App
}
type c13obj struct {
	cdor.Cdor
	*App
}
type c13objn struct {
	cdor.Cdor
	*App
}
type App struct {
	cdor.App
}
//line doc/main_cdor.gox:6
func (this *App) MainEntry() {
//line doc/main_cdor.gox:6:1
	this.ApplyConfig(this.Cfg().ElkLayout())
//line doc/main_cdor.gox:8:1
	buf := bytes.NewBuffer(nil)
//line doc/main_cdor.gox:10:1
	this.RangeDiagrams(func(name string, data []byte, err error) error {
//line doc/main_cdor.gox:11:1
		if err != nil {
//line doc/main_cdor.gox:12:1
			fmt.Println(err)
//line doc/main_cdor.gox:13:1
			return err
		}
//line doc/main_cdor.gox:15:1
		name = name[3:]
//line doc/main_cdor.gox:16:1
		err = os.WriteFile("doc/examples/"+name+".svg", data, 0600)
//line doc/main_cdor.gox:17:1
		if err != nil {
//line doc/main_cdor.gox:18:1
			fmt.Println(err)
//line doc/main_cdor.gox:19:1
			return err
		}
//line doc/main_cdor.gox:21:1
		buf.WriteString("![" + name + "](doc/examples/" + name + ".svg)\n")
//line doc/main_cdor.gox:22:1
		return nil
	})
//line doc/main_cdor.gox:25:1
	readmeTemp, err := os.ReadFile("doc/readmeTemp.md")
//line doc/main_cdor.gox:26:1
	if err != nil {
//line doc/main_cdor.gox:27:1
		panic(err)
	}
//line doc/main_cdor.gox:30:1
	readmeContent := string(readmeTemp)
//line doc/main_cdor.gox:32:1
	readmeContent = strings.Replace(readmeContent, "{{ .Examples }}", buf.String(), 1)
//line doc/main_cdor.gox:33:1
	if
//line doc/main_cdor.gox:33:1
	err := os.WriteFile("README.md", []byte(readmeContent), 0600); err != nil {
//line doc/main_cdor.gox:34:1
		panic(err)
	}
}
func main() {
	cdor.Gopt_App_Main(new(App), new(c01hello), new(c02id), new(c03shape), new(c04connections), new(c05containers), new(c06md), new(c07latex), new(c08sql_table), new(c09class), new(c10json), new(c10jsonn), new(c11toml), new(c11tomln), new(c12yaml), new(c12yamln), new(c13obj), new(c13objn))
}
//line doc/c01hello_cdor.gox:1
func (this *c01hello) Main() {
//line doc/c01hello_cdor.gox:1:1
	this.Direction("right")
//line doc/c01hello_cdor.gox:2:1
	this.MdCode(`con("Go+", "Go").label("cdor")`)
//line doc/c01hello_cdor.gox:3:1
	this.Con("Go+", "Go").Label("cdor")
}
//line doc/c02id_cdor.gox:1
func (this *c02id) Main() {
//line doc/c02id_cdor.gox:1:1
	this.MdCode(`node "imAShape"
node "im_a_shape"
node "im a shape"
node "i'm a shape"
node "a-shape"
`)
//line doc/c02id_cdor.gox:7:1
	this.Node("imAShape")
//line doc/c02id_cdor.gox:8:1
	this.Node("im_a_shape")
//line doc/c02id_cdor.gox:9:1
	this.Node("im a shape")
//line doc/c02id_cdor.gox:10:1
	this.Node("i'm a shape")
//line doc/c02id_cdor.gox:11:1
	this.Node("a-shape")
}
//line doc/c03shape_cdor.gox:1
func (this *c03shape) Main() {
//line doc/c03shape_cdor.gox:1:1
	this.MdCode(`node("pg").label("PostgreSQL")
node("Cloud").label("my cloud").shape("cloud")`)
//line doc/c03shape_cdor.gox:3:1
	this.Node("pg").Label("PostgreSQL")
//line doc/c03shape_cdor.gox:4:1
	this.Node("Cloud").Label("my cloud").Shape("cloud")
}
//line doc/c04connections_cdor.gox:1
func (this *c04connections) Main() {
//line doc/c04connections_cdor.gox:1:1
	this.Cfg().ElkLayout()
//line doc/c04connections_cdor.gox:2:1
	this.MdCode(`con("x", "y").srcHeadShape("none").stroke("orange")
con("x", "y").dstHeadShape("none").stroke("green")
con("x", "y").srcHeadShape("none").dstHeadShape("none")
con("a", "b").srcHeadShape("circle")
con("b", "c").srcHeadShape("circle")
con("c", "a")`)
//line doc/c04connections_cdor.gox:8:1
	this.Con("x", "y").SrcHeadShape("none").Stroke("orange")
//line doc/c04connections_cdor.gox:9:1
	this.Con("x", "y").DstHeadShape("none").Stroke("green")
//line doc/c04connections_cdor.gox:10:1
	this.Con("x", "y").SrcHeadShape("none").DstHeadShape("none")
//line doc/c04connections_cdor.gox:11:1
	this.Con("a", "b").SrcHeadShape("circle")
//line doc/c04connections_cdor.gox:12:1
	this.Con("b", "c").SrcHeadShape("circle")
//line doc/c04connections_cdor.gox:13:1
	this.Con("c", "a")
}
//line doc/c05containers_cdor.gox:1
func (this *c05containers) Main() {
//line doc/c05containers_cdor.gox:1:1
	this.Direction("right")
//line doc/c05containers_cdor.gox:2:1
	this.Cfg().ElkLayout()
//line doc/c05containers_cdor.gox:3:1
	this.MdCode(`opt := conOpt().srcHeadShape("none")
node("clouds").children(
	node("aws").label("AWS").cons(
		con("load_balancer", "api"),
		con("api", "db"),
	),
	node("gcloud").label("Google Cloud").cons(
		con("auth", "db").opt(opt),
	)).
	cons(
		con("gcloud", "aws").opt(opt),
	)
con("users", "clouds.aws.load_balancer").opt(opt)
con("users", "clouds.gcloud.auth").opt(opt)
con("ci.deploys", "clouds").opt(opt)
`)
//line doc/c05containers_cdor.gox:19:1
	opt := this.ConOpt().SrcHeadShape("none")
//line doc/c05containers_cdor.gox:20:1
	this.Node("clouds").Children(this.Node("aws").Label("AWS").Cons(this.Con("load_balancer", "api"), this.Con("api", "db")), this.Node("gcloud").Label("Google Cloud").Cons(this.Con("auth", "db").Opt(opt))).Cons(this.Con("gcloud", "aws").Opt(opt))
//line doc/c05containers_cdor.gox:31:1
	this.Con("users", "clouds.aws.load_balancer").Opt(opt)
//line doc/c05containers_cdor.gox:32:1
	this.Con("users", "clouds.gcloud.auth").Opt(opt)
//line doc/c05containers_cdor.gox:33:1
	this.Con("ci.deploys", "clouds").Opt(opt)
}
//line doc/c06md_cdor.gox:1
func (this *c06md) Main() {
//line doc/c06md_cdor.gox:1:1
	mdContent := `# I can do headers
  - lists
  - lists

  And other normal markdown stuff
`
//line doc/c06md_cdor.gox:7:1
	this.MdCode("mdContent := `" + mdContent + "`\nnode(\"markdown\").code(\"md\", mdContent)")
//line doc/c06md_cdor.gox:8:1
	this.Node("markdown").Code("md", mdContent)
}
//line doc/c07latex_cdor.gox:1
func (this *c07latex) Main() {
//line doc/c07latex_cdor.gox:1:1
	tex := `\lim_{h \rightarrow 0 } \frac{f(x+h)-f(x)}{h}`
//line doc/c07latex_cdor.gox:2:1
	this.MdCode("tex := `" + tex + "`\nnode(\"tex\").code(\"latex\", tex)")
//line doc/c07latex_cdor.gox:3:1
	this.Node("tex").Code("latex", tex)
}
//line doc/c08sql_table_cdor.gox:1
func (this *c08sql_table) Main() {
//line doc/c08sql_table_cdor.gox:1:1
	this.MdCode(`node("table").shape("sql_table").
	field("id", "int", "primary_key").
	field("last_updated", "timestamp with time zone")`)
//line doc/c08sql_table_cdor.gox:4:1
	this.Node("table").Shape("sql_table").Field("id", "int", "primary_key").Field("last_updated", "timestamp with time zone")
}
//line doc/c09class_cdor.gox:1
func (this *c09class) Main() {
//line doc/c09class_cdor.gox:1:1
	this.MdCode(`node("MyClass").
	shape("class").
	field("Age", "int").
	field("+ Field", "[]string").
	field("- method(a uint64)", "(x, y int)").
	field("# peekn(n int)", "(s string, eof bool)")`)
//line doc/c09class_cdor.gox:7:1
	this.Node("MyClass").Shape("class").Field("Age", "int").Field("+ Field", "[]string").Field("- method(a uint64)", "(x, y int)").Field("# peekn(n int)", "(s string, eof bool)")
}
//line doc/c10json_cdor.gox:1
func (this *c10json) Main() {
//line doc/c10json_cdor.gox:1:1
	data := `{
  "firstName": "John",
  "lastName": "Smith",
  "isAlive": true,
  "age": 27,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021-3100"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [],
  "spouse": null
}`
//line doc/c10json_cdor.gox:27:1
	this.MdCode("json `" + data + "`")
//line doc/c10json_cdor.gox:28:1
	this.Json(data)
}
//line doc/c10jsonn_cdor.gox:1
func (this *c10jsonn) Main() {
//line doc/c10jsonn_cdor.gox:1:1
	data := `{
   "fruit":"Apple", 
   "colors": ["Red", "Green"]
}`
//line doc/c10jsonn_cdor.gox:6:1
	this.MdCode(`node("obj").json ` + dotQuote + data + dotQuote + `
scon "root", "obj.0"`)
//line doc/c10jsonn_cdor.gox:9:1
	this.Node("obj").Json(data)
//line doc/c10jsonn_cdor.gox:10:1
	this.Scon("root", "obj.0")
//line doc/c10jsonn_cdor.gox:11:1
	this.Direction("right")
}
//line doc/c11toml_cdor.gox:1
func (this *c11toml) Main() {
//line doc/c11toml_cdor.gox:1:1
	input := `age = 27.0
children = []
firstName = "John"
isAlive = true
lastName = "Smith"

[address]
  city = "New York"
  postalCode = "10021-3100"
  state = "NY"
  streetAddress = "21 2nd Street"

[[phoneNumbers]]
  number = "212 555-1234"
  type = "home"

[[phoneNumbers]]
  number = "646 555-4567"
  type = "office"`
//line doc/c11toml_cdor.gox:21:1
	this.MdCode(`input := ` + dotQuote + input + dotQuote + `
toml input`)
//line doc/c11toml_cdor.gox:24:1
	this.Toml(input)
}
//line doc/c11tomln_cdor.gox:1
func (this *c11tomln) Main() {
//line doc/c11tomln_cdor.gox:1:1
	input := `age = 27.0
children = []
firstName = "John"
isAlive = true
lastName = "Smith"

[address]
  city = "New York"
  postalCode = "10021-3100"
  state = "NY"
  streetAddress = "21 2nd Street"

[[phoneNumbers]]
  number = "212 555-1234"
  type = "home"

[[phoneNumbers]]
  number = "646 555-4567"
  type = "office"`
//line doc/c11tomln_cdor.gox:21:1
	this.MdCode(`input := ` + dotQuote + input + dotQuote + `
node("toml").toml(input)`)
//line doc/c11tomln_cdor.gox:24:1
	this.Node("toml").Toml(input)
//line doc/c11tomln_cdor.gox:25:1
	this.Direction("right")
}
//line doc/c12yaml_cdor.gox:1
func (this *c12yaml) Main() {
//line doc/c12yaml_cdor.gox:1:1
	input := `address:
  city: New York
  postalCode: 10021-3100
  state: NY
  streetAddress: 21 2nd Street
age: 27
children: []
firstName: John
isAlive: true
lastName: Smith
phoneNumbers:
- number: 212 555-1234
  type: home
- number: 646 555-4567
  type: office
spouse: null
`
//line doc/c12yaml_cdor.gox:19:1
	this.MdCode(`input := ` + dotQuote + input + dotQuote + `
yaml inlut`)
//line doc/c12yaml_cdor.gox:22:1
	this.Yaml(input)
//line doc/c12yaml_cdor.gox:23:1
	this.Direction("right")
}
//line doc/c12yamln_cdor.gox:1
func (this *c12yamln) Main() {
//line doc/c12yamln_cdor.gox:1:1
	input := `address:
  city: New York
  postalCode: 10021-3100
  state: NY
  streetAddress: 21 2nd Street
age: 27
children: []
firstName: John
isAlive: true
lastName: Smith
phoneNumbers:
- number: 212 555-1234
  type: home
- number: 646 555-4567
  type: office
spouse: null
`
//line doc/c12yamln_cdor.gox:19:1
	this.MdCode(`input:=` + dotQuote + input + dotQuote + `
node("yaml").yaml(input)`)
//line doc/c12yamln_cdor.gox:22:1
	this.Node("yaml").Yaml(input)
//line doc/c12yamln_cdor.gox:23:1
	this.Direction("right")
}
//line doc/c13obj_cdor.gox:1
func (this *c13obj) Main() {
//line doc/c13obj_cdor.gox:1:1
	person := Person{Name: "Tom", Age: 27}
//line doc/c13obj_cdor.gox:3:1
	this.MdCode(`type Persion struct {
    Name string
    Age int
}

person := Person{Name: "Tom", Age: 27}
obj person`)
//line doc/c13obj_cdor.gox:11:1
	this.Obj(person)
}
//line doc/c13objn_cdor.gox:1
func (this *c13objn) Main() {
//line doc/c13objn_cdor.gox:1:1
	person := Person{Name: "Tom", Age: 27}
//line doc/c13objn_cdor.gox:3:1
	this.MdCode(`type Persion struct {
    Name string
    Age int
}

person := Person{Name: "Tom", Age: 27}
node("obj").obj(person)`)
//line doc/c13objn_cdor.gox:11:1
	this.Node("obj").Obj(person)
//line doc/c13objn_cdor.gox:12:1
	this.Direction("right")
}
