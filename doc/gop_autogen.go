// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"fmt"
	"github.com/qiniu/x/errors"
	"github.com/zrcoder/cdor"
)

const _ = true
const mdCodeTemp = "```\n%s\n```"

type doc struct {
	cdor.Cdor
}
//line doc/doc_cdor.gox:12:1
func (this *doc) genMdNode(code string, id ...string) {
//line doc/doc_cdor.gox:13:1
	key := "md"
//line doc/doc_cdor.gox:14:1
	if len(id) > 0 {
//line doc/doc_cdor.gox:15:1
		key = id[0]
	}
//line doc/doc_cdor.gox:17:1
	this.Node(key).Code("md", fmt.Sprintf(mdCodeTemp, code))
}
//line doc/doc_cdor.gox:20:1
func (this *doc) save(name string) {
//line doc/doc_cdor.gox:21:1
	func() {
//line doc/doc_cdor.gox:21:1
		var _gop_err error
//line doc/doc_cdor.gox:21:1
		_gop_err = this.SaveFile("examples/" + name + ".svg")
//line doc/doc_cdor.gox:21:1
		if _gop_err != nil {
//line doc/doc_cdor.gox:21:1
			_gop_err = errors.NewFrame(_gop_err, "saveFile \"examples/${name}.svg\"", "doc/doc_cdor.gox", 21, "main.save")
//line doc/doc_cdor.gox:21:1
			panic(_gop_err)
		}
//line doc/doc_cdor.gox:21:1
		return
	}()
}
//line doc/doc_cdor.gox:24
func (this *doc) MainEntry() {
//line doc/doc_cdor.gox:24:1
	this.Cfg().Pad(27).ElkLayout()
//line doc/doc_cdor.gox:26:1
	this.genMdNode(`con("Go+", "Go").label("cdor")`)
//line doc/doc_cdor.gox:27:1
	this.Con("Go+", "Go").Label("cdor")
//line doc/doc_cdor.gox:28:1
	this.save("hello")
//line doc/doc_cdor.gox:30:1
	this.Clear()
//line doc/doc_cdor.gox:31:1
	this.genMdNode(`node "imAShape"
node "im_a_shape"
node "im a shape"
node "i'm a shape"
node "a-shape"
`)
//line doc/doc_cdor.gox:37:1
	this.Node("imAShape")
//line doc/doc_cdor.gox:38:1
	this.Node("im_a_shape")
//line doc/doc_cdor.gox:39:1
	this.Node("im a shape")
//line doc/doc_cdor.gox:40:1
	this.Node("i'm a shape")
//line doc/doc_cdor.gox:41:1
	this.Node("a-shape")
//line doc/doc_cdor.gox:42:1
	this.save("example-id")
//line doc/doc_cdor.gox:44:1
	this.Clear()
//line doc/doc_cdor.gox:45:1
	this.genMdNode(`node("pg").label("PostgreSQL")
node("Cloud").label("my cloud").shape("cloud")`)
//line doc/doc_cdor.gox:47:1
	this.Node("pg").Label("PostgreSQL")
//line doc/doc_cdor.gox:48:1
	this.Node("Cloud").Label("my cloud").Shape("cloud")
//line doc/doc_cdor.gox:49:1
	this.save("shape")
//line doc/doc_cdor.gox:51:1
	this.Clear()
//line doc/doc_cdor.gox:52:1
	this.genMdNode(`con("x", "y").srcHeadShape("none").stroke("orange")
con("x", "y").dstHeadShape("none").stroke("green")
con("x", "y").srcHeadShape("none").dstHeadShape("none")
con("a", "b").srcHeadShape("circle")
con("b", "c").srcHeadShape("circle")
con("c", "a")`)
//line doc/doc_cdor.gox:59:1
	this.Con("x", "y").SrcHeadShape("none").Stroke("orange")
//line doc/doc_cdor.gox:60:1
	this.Con("x", "y").DstHeadShape("none").Stroke("green")
//line doc/doc_cdor.gox:61:1
	this.Con("x", "y").SrcHeadShape("none").DstHeadShape("none")
//line doc/doc_cdor.gox:62:1
	this.Con("a", "b").SrcHeadShape("circle")
//line doc/doc_cdor.gox:63:1
	this.Con("b", "c").SrcHeadShape("circle")
//line doc/doc_cdor.gox:64:1
	this.Con("c", "a")
//line doc/doc_cdor.gox:65:1
	this.save("connections")
//line doc/doc_cdor.gox:68:1
	this.Clear()
//line doc/doc_cdor.gox:69:1
	opt := this.ArrowOpt().SrcHeadShape("none")
//line doc/doc_cdor.gox:70:1
	this.genMdNode(`opt := arrowOpt().srcHeadShape("none")

node("clouds").children(
	node("aws").label("AWS").cons(
		con("load_balancer", "api"),
		con("api", "db"),
	),
	node("gcloud").label("Google Cloud").cons(
		con("auth", "db").arrowOpt(opt),
	)).
	cons(
		con("gcloud", "aws").arrowOpt(opt),
	)
con("users", "clouds.aws.load_balancer").arrowOpt(opt)
con("users", "clouds.gcloud.auth").arrowOpt(opt)
con("ci.deploys", "clouds").arrowOpt(opt)
`)
//line doc/doc_cdor.gox:87:1
	this.Node("clouds").Children(this.Node("aws").Label("AWS").Cons(this.Con("load_balancer", "api"), this.Con("api", "db")), this.Node("gcloud").Label("Google Cloud").Cons(this.Con("auth", "db").ArrowOpt(opt))).Cons(this.Con("gcloud", "aws").ArrowOpt(opt))
//line doc/doc_cdor.gox:98:1
	this.Con("users", "clouds.aws.load_balancer").ArrowOpt(opt)
//line doc/doc_cdor.gox:99:1
	this.Con("users", "clouds.gcloud.auth").ArrowOpt(opt)
//line doc/doc_cdor.gox:100:1
	this.Con("ci.deploys", "clouds").ArrowOpt(opt)
//line doc/doc_cdor.gox:101:1
	this.save("containers")
//line doc/doc_cdor.gox:103:1
	this.Clear()
//line doc/doc_cdor.gox:104:1
	mdContent := `# I can do headers
  - lists
  - lists

  And other normal markdown stuff
`
//line doc/doc_cdor.gox:110:1
	this.genMdNode("mdContent := `" + mdContent + "`\nnode(\"markdown\").code(\"md\", mdContent)")
//line doc/doc_cdor.gox:111:1
	this.Node("markdown").Code("md", mdContent)
//line doc/doc_cdor.gox:112:1
	this.save("md")
//line doc/doc_cdor.gox:114:1
	this.Clear()
//line doc/doc_cdor.gox:115:1
	tex := `\lim_{h \rightarrow 0 } \frac{f(x+h)-f(x)}{h}`
//line doc/doc_cdor.gox:116:1
	this.genMdNode("tex := `" + tex + "`\nnode(\"tex\").code(\"latex\", tex)")
//line doc/doc_cdor.gox:117:1
	this.Node("tex").Code("latex", tex)
//line doc/doc_cdor.gox:118:1
	this.save("latex")
}
func main() {
	cdor.Gopt_App_Main(new(doc))
}
